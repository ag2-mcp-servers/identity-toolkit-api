# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:18:53+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class GoogleCloudIdentitytoolkitAdminV2AllowByDefault(BaseModel):
    disallowedRegions: Optional[List[str]] = Field(
        None,
        description='Two letter unicode region codes to disallow as defined by https://cldr.unicode.org/ The full list of these region codes is here: https://github.com/unicode-cldr/cldr-localenames-full/blob/master/main/en/territories.json',
    )


class GoogleCloudIdentitytoolkitAdminV2AllowlistOnly(BaseModel):
    allowedRegions: Optional[List[str]] = Field(
        None,
        description='Two letter unicode region codes to allow as defined by https://cldr.unicode.org/ The full list of these region codes is here: https://github.com/unicode-cldr/cldr-localenames-full/blob/master/main/en/territories.json',
    )


class GoogleCloudIdentitytoolkitAdminV2Anonymous(BaseModel):
    enabled: Optional[bool] = Field(
        None,
        description='Whether anonymous user auth is enabled for the project or not.',
    )


class GoogleCloudIdentitytoolkitAdminV2ClientPermissions(BaseModel):
    disabledUserDeletion: Optional[bool] = Field(
        None,
        description='When true, end users cannot delete their account on the associated project through any of our API methods',
    )
    disabledUserSignup: Optional[bool] = Field(
        None,
        description='When true, end users cannot sign up for a new account on the associated project through any of our API methods',
    )


class GoogleCloudIdentitytoolkitAdminV2CodeFlowConfig(BaseModel):
    keyId: Optional[str] = Field(None, description='Key ID for the private key.')
    privateKey: Optional[str] = Field(
        None, description='Private key used for signing the client secret JWT.'
    )
    teamId: Optional[str] = Field(None, description='Apple Developer Team ID.')


class Subtype(Enum):
    SUBTYPE_UNSPECIFIED = 'SUBTYPE_UNSPECIFIED'
    IDENTITY_PLATFORM = 'IDENTITY_PLATFORM'
    FIREBASE_AUTH = 'FIREBASE_AUTH'


class GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdp(BaseModel):
    description: Optional[str] = Field(None, description='Description of the Idp')
    idpId: Optional[str] = Field(None, description='Id the of Idp')


class CustomDomainState(Enum):
    VERIFICATION_STATE_UNSPECIFIED = 'VERIFICATION_STATE_UNSPECIFIED'
    NOT_STARTED = 'NOT_STARTED'
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'


class GoogleCloudIdentitytoolkitAdminV2DnsInfo(BaseModel):
    customDomain: Optional[str] = Field(
        None, description='Output only. The applied verified custom domain.'
    )
    customDomainState: Optional[CustomDomainState] = Field(
        None,
        description='Output only. The current verification state of the custom domain. The custom domain will only be used once the domain verification is successful.',
    )
    domainVerificationRequestTime: Optional[str] = Field(
        None,
        description='Output only. The timestamp of initial request for the current domain verification.',
    )
    pendingCustomDomain: Optional[str] = Field(
        None, description="Output only. The custom domain that's to be verified."
    )
    useCustomDomain: Optional[bool] = Field(
        None, description='Whether to use custom domain.'
    )


class GoogleCloudIdentitytoolkitAdminV2Email(BaseModel):
    enabled: Optional[bool] = Field(
        None, description='Whether email auth is enabled for the project or not.'
    )
    passwordRequired: Optional[bool] = Field(
        None,
        description='Whether a password is required for email auth or not. If true, both an email and password must be provided to sign in. If false, a user may sign in via either email/password or email link.',
    )


class GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig(BaseModel):
    enableImprovedEmailPrivacy: Optional[bool] = Field(
        None,
        description="Migrates the project to a state of improved email privacy. For example certain error codes are more generic to avoid giving away information on whether the account exists. In addition, this disables certain features that as a side-effect allow user enumeration. Enabling this toggle disables the fetchSignInMethodsForEmail functionality and changing the user's email to an unverified email. It is recommended to remove dependence on this functionality and enable this toggle to improve user privacy.",
    )


class BodyFormat(Enum):
    BODY_FORMAT_UNSPECIFIED = 'BODY_FORMAT_UNSPECIFIED'
    PLAIN_TEXT = 'PLAIN_TEXT'
    HTML = 'HTML'


class GoogleCloudIdentitytoolkitAdminV2EmailTemplate(BaseModel):
    body: Optional[str] = Field(None, description='Email body')
    bodyFormat: Optional[BodyFormat] = Field(None, description='Email body format')
    customized: Optional[bool] = Field(
        None,
        description='Output only. Whether the body or subject of the email is customized.',
    )
    replyTo: Optional[str] = Field(None, description='Reply-to address')
    senderDisplayName: Optional[str] = Field(None, description='Sender display name')
    senderLocalPart: Optional[str] = Field(
        None, description='Local part of From address'
    )
    subject: Optional[str] = Field(None, description='Subject of the email')


class GoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials(BaseModel):
    accessToken: Optional[bool] = Field(
        None,
        description="Whether to pass the user's OAuth identity provider's access token.",
    )
    idToken: Optional[bool] = Field(
        None,
        description="Whether to pass the user's OIDC identity provider's ID token.",
    )
    refreshToken: Optional[bool] = Field(
        None,
        description="Whether to pass the user's OAuth identity provider's refresh token.",
    )


class Algorithm(Enum):
    HASH_ALGORITHM_UNSPECIFIED = 'HASH_ALGORITHM_UNSPECIFIED'
    HMAC_SHA256 = 'HMAC_SHA256'
    HMAC_SHA1 = 'HMAC_SHA1'
    HMAC_MD5 = 'HMAC_MD5'
    SCRYPT = 'SCRYPT'
    PBKDF_SHA1 = 'PBKDF_SHA1'
    MD5 = 'MD5'
    HMAC_SHA512 = 'HMAC_SHA512'
    SHA1 = 'SHA1'
    BCRYPT = 'BCRYPT'
    PBKDF2_SHA256 = 'PBKDF2_SHA256'
    SHA256 = 'SHA256'
    SHA512 = 'SHA512'
    STANDARD_SCRYPT = 'STANDARD_SCRYPT'


class GoogleCloudIdentitytoolkitAdminV2HashConfig(BaseModel):
    algorithm: Optional[Algorithm] = Field(
        None,
        description='Output only. Different password hash algorithms used in Identity Toolkit.',
    )
    memoryCost: Optional[int] = Field(
        None,
        description='Output only. Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.',
    )
    rounds: Optional[int] = Field(
        None,
        description='Output only. How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms.',
    )
    saltSeparator: Optional[str] = Field(
        None,
        description='Output only. Non-printable character to be inserted between the salt and plain text password in base64.',
    )
    signerKey: Optional[str] = Field(
        None, description='Output only. Signer key in base64.'
    )


class GoogleCloudIdentitytoolkitAdminV2IdpCertificate(BaseModel):
    x509Certificate: Optional[str] = Field(None, description='The x509 certificate')


class GoogleCloudIdentitytoolkitAdminV2IdpConfig(BaseModel):
    idpCertificates: Optional[List[GoogleCloudIdentitytoolkitAdminV2IdpCertificate]] = (
        Field(
            None,
            description="IDP's public keys for verifying signature in the assertions.",
        )
    )
    idpEntityId: Optional[str] = Field(
        None, description='Unique identifier for all SAML entities.'
    )
    signRequest: Optional[bool] = Field(
        None, description='Indicates if outbounding SAMLRequest should be signed.'
    )
    ssoUrl: Optional[str] = Field(
        None, description='URL to send Authentication request to.'
    )


class GoogleCloudIdentitytoolkitAdminV2Inheritance(BaseModel):
    emailSendingConfig: Optional[bool] = Field(
        None,
        description='Whether to allow the tenant to inherit custom domains, email templates, and custom SMTP settings. If true, email sent from tenant will follow the project level email sending configurations. If false (by default), emails will go with the default settings with no customizations.',
    )


class GoogleCloudIdentitytoolkitAdminV2InitializeIdentityPlatformRequest(BaseModel):
    pass


class GoogleCloudIdentitytoolkitAdminV2InitializeIdentityPlatformResponse(BaseModel):
    pass


class GoogleCloudIdentitytoolkitAdminV2ListDefaultSupportedIdpsResponse(BaseModel):
    defaultSupportedIdps: Optional[
        List[GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdp]
    ] = Field(None, description='The set of configs.')
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class EnabledProvider(Enum):
    PROVIDER_UNSPECIFIED = 'PROVIDER_UNSPECIFIED'
    PHONE_SMS = 'PHONE_SMS'


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'
    MANDATORY = 'MANDATORY'


class GoogleCloudIdentitytoolkitAdminV2MultiTenantConfig(BaseModel):
    allowTenants: Optional[bool] = Field(
        None, description='Whether this project can have tenants or not.'
    )
    defaultTenantLocation: Optional[str] = Field(
        None,
        description='The default cloud parent org or folder that the tenant project should be created under. The parent resource name should be in the format of "/", such as "folders/123" or "organizations/456". If the value is not set, the tenant will be created under the same organization or folder as the agent project.',
    )


class GoogleCloudIdentitytoolkitAdminV2OAuthResponseType(BaseModel):
    code: Optional[bool] = Field(
        None,
        description="If true, authorization code is returned from IdP's authorization endpoint.",
    )
    idToken: Optional[bool] = Field(
        None,
        description="If true, ID token is returned from IdP's authorization endpoint.",
    )
    token: Optional[bool] = Field(
        None,
        description='Do not use. The `token` response type is not supported at the moment.',
    )


class GoogleCloudIdentitytoolkitAdminV2Permissions(BaseModel):
    disabledUserDeletion: Optional[bool] = Field(
        None,
        description='When true, end users cannot delete their account on the associated project through any of our API methods',
    )
    disabledUserSignup: Optional[bool] = Field(
        None,
        description='When true, end users cannot sign up for a new account on the associated project through any of our API methods',
    )


class GoogleCloudIdentitytoolkitAdminV2PhoneNumber(BaseModel):
    enabled: Optional[bool] = Field(
        None, description='Whether phone number auth is enabled for the project or not.'
    )
    testPhoneNumbers: Optional[Dict[str, str]] = Field(
        None, description='A map of that can be used for phone auth testing.'
    )


class State1(Enum):
    MFA_STATE_UNSPECIFIED = 'MFA_STATE_UNSPECIFIED'
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'
    MANDATORY = 'MANDATORY'


class EmailPasswordEnforcementState(Enum):
    RECAPTCHA_PROVIDER_ENFORCEMENT_STATE_UNSPECIFIED = (
        'RECAPTCHA_PROVIDER_ENFORCEMENT_STATE_UNSPECIFIED'
    )
    OFF = 'OFF'
    AUDIT = 'AUDIT'
    ENFORCE = 'ENFORCE'


class Type(Enum):
    CLIENT_TYPE_UNSPECIFIED = 'CLIENT_TYPE_UNSPECIFIED'
    WEB = 'WEB'
    IOS = 'IOS'
    ANDROID = 'ANDROID'


class GoogleCloudIdentitytoolkitAdminV2RecaptchaKey(BaseModel):
    key: Optional[str] = Field(
        None,
        description='The reCAPTCHA Enterprise key resource name, e.g. "projects/{project}/keys/{key}"',
    )
    type: Optional[Type] = Field(None, description="The client's platform type.")


class Action(Enum):
    RECAPTCHA_ACTION_UNSPECIFIED = 'RECAPTCHA_ACTION_UNSPECIFIED'
    BLOCK = 'BLOCK'


class GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule(BaseModel):
    action: Optional[Action] = Field(
        None,
        description='The action taken if the reCAPTCHA score of a request is within the interval [start_score, end_score].',
    )
    endScore: Optional[float] = Field(
        None,
        description='The end score (inclusive) of the score range for an action. Must be a value between 0.0 and 1.0, at 11 discrete values; e.g. 0, 0.1, 0.2, 0.3, ... 0.9, 1.0. A score of 0.0 indicates the riskiest request (likely a bot), whereas 1.0 indicates the safest request (likely a human). See https://cloud.google.com/recaptcha-enterprise/docs/interpret-assessment.',
    )


class GoogleCloudIdentitytoolkitAdminV2RequestLogging(BaseModel):
    enabled: Optional[bool] = Field(
        None, description='Whether logging is enabled for this project or not.'
    )


class Method(Enum):
    METHOD_UNSPECIFIED = 'METHOD_UNSPECIFIED'
    DEFAULT = 'DEFAULT'
    CUSTOM_SMTP = 'CUSTOM_SMTP'


class GoogleCloudIdentitytoolkitAdminV2SignInConfig(BaseModel):
    allowDuplicateEmails: Optional[bool] = Field(
        None,
        description='Whether to allow more than one account to have the same email.',
    )
    anonymous: Optional[GoogleCloudIdentitytoolkitAdminV2Anonymous] = Field(
        None,
        description='Configuration options related to authenticating an anonymous user.',
    )
    email: Optional[GoogleCloudIdentitytoolkitAdminV2Email] = Field(
        None,
        description='Configuration options related to authenticating a user by their email address.',
    )
    hashConfig: Optional[GoogleCloudIdentitytoolkitAdminV2HashConfig] = Field(
        None, description='Output only. Hash config information.'
    )
    phoneNumber: Optional[GoogleCloudIdentitytoolkitAdminV2PhoneNumber] = Field(
        None,
        description='Configuration options related to authenticated a user by their phone number.',
    )


class GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig(BaseModel):
    allowByDefault: Optional[GoogleCloudIdentitytoolkitAdminV2AllowByDefault] = Field(
        None,
        description='A policy of allowing SMS to every region by default and adding disallowed regions to a disallow list.',
    )
    allowlistOnly: Optional[GoogleCloudIdentitytoolkitAdminV2AllowlistOnly] = Field(
        None,
        description='A policy of only allowing regions by explicitly adding them to an allowlist.',
    )


class GoogleCloudIdentitytoolkitAdminV2SmsTemplate(BaseModel):
    content: Optional[str] = Field(
        None,
        description="Output only. The SMS's content. Can contain the following placeholders which will be replaced with the appropriate values: %APP_NAME% - For Android or iOS apps, the app's display name. For web apps, the domain hosting the application. %LOGIN_CODE% - The OOB code being sent in the SMS.",
    )


class SecurityMode(Enum):
    SECURITY_MODE_UNSPECIFIED = 'SECURITY_MODE_UNSPECIFIED'
    SSL = 'SSL'
    START_TLS = 'START_TLS'


class GoogleCloudIdentitytoolkitAdminV2Smtp(BaseModel):
    host: Optional[str] = Field(None, description='SMTP relay host')
    password: Optional[str] = Field(None, description='SMTP relay password')
    port: Optional[int] = Field(None, description='SMTP relay port')
    securityMode: Optional[SecurityMode] = Field(
        None, description='SMTP security mode.'
    )
    senderEmail: Optional[str] = Field(
        None, description='Sender email for the SMTP relay'
    )
    username: Optional[str] = Field(None, description='SMTP relay username')


class GoogleCloudIdentitytoolkitAdminV2SpCertificate(BaseModel):
    expiresAt: Optional[str] = Field(
        None, description='Timestamp of the cert expiration instance.'
    )
    x509Certificate: Optional[str] = Field(
        None, description='Self-signed public certificate.'
    )


class GoogleCloudIdentitytoolkitAdminV2SpConfig(BaseModel):
    callbackUri: Optional[str] = Field(
        None, description='Callback URI where responses from IDP are handled.'
    )
    spCertificates: Optional[List[GoogleCloudIdentitytoolkitAdminV2SpCertificate]] = (
        Field(
            None,
            description='Output only. Public certificates generated by the server to verify the signature in SAMLRequest in the SP-initiated flow.',
        )
    )
    spEntityId: Optional[str] = Field(
        None, description='Unique identifier for all SAML entities.'
    )


class GoogleCloudIdentitytoolkitAdminV2TemporaryQuota(BaseModel):
    quota: Optional[str] = Field(
        None,
        description="Corresponds to the 'refill_token_count' field in QuotaServer config",
    )
    quotaDuration: Optional[str] = Field(
        None, description='How long this quota will be active for'
    )
    startTime: Optional[str] = Field(
        None, description='When this quota will take affect'
    )


class GoogleCloudIdentitytoolkitAdminV2TotpMfaProviderConfig(BaseModel):
    adjacentIntervals: Optional[int] = Field(
        None,
        description='The allowed number of adjacent intervals that will be used for verification to avoid clock skew.',
    )


class GoogleCloudIdentitytoolkitAdminV2Trigger(BaseModel):
    functionUri: Optional[str] = Field(
        None, description='HTTP URI trigger for the Cloud Function.'
    )
    updateTime: Optional[str] = Field(None, description='When the trigger was changed.')


class GoogleCloudIdentitytoolkitV2AuthenticatorAssertionResponse(BaseModel):
    authenticatorData: Optional[str] = Field(
        None, description='The AuthenticatorData from the authenticator.'
    )
    clientDataJson: Optional[str] = Field(
        None, description='The CollectedClientData object from the authenticator.'
    )
    signature: Optional[str] = Field(
        None, description='The signature from the authenticator.'
    )
    userHandle: Optional[str] = Field(None, description='The user handle.')


class GoogleCloudIdentitytoolkitV2AuthenticatorAttestationResponse(BaseModel):
    attestationObject: Optional[str] = Field(
        None, description='The attestation object from the authenticator.'
    )
    clientDataJson: Optional[str] = Field(
        None, description='The CollectedClientData object from the authenticator.'
    )
    transports: Optional[List[str]] = Field(
        None,
        description='Authenticator transports that are supported by the authenticator.',
    )


class GoogleCloudIdentitytoolkitV2AuthenticatorAuthenticationResponse(BaseModel):
    authenticatorAssertionResponse: Optional[
        GoogleCloudIdentitytoolkitV2AuthenticatorAssertionResponse
    ] = Field(None, description='Authentication assertion from the authenticator.')
    credentialId: Optional[str] = Field(
        None, description='Identifier for the authentication credential.'
    )
    credentialType: Optional[str] = Field(None, description='The type of public key.')


class GoogleCloudIdentitytoolkitV2AuthenticatorRegistrationResponse(BaseModel):
    authenticatorAttestationResponse: Optional[
        GoogleCloudIdentitytoolkitV2AuthenticatorAttestationResponse
    ] = Field(
        None, description='The attestation response object as described in the spec.'
    )
    credentialId: Optional[str] = Field(
        None, description='Identifier for the registered credential.'
    )
    credentialType: Optional[str] = Field(None, description='The type of credential.')


class GoogleCloudIdentitytoolkitV2AuthenticatorSelectionCriteria(BaseModel):
    authenticatorAttachment: Optional[str] = Field(
        None, description='The preferred authenticator attachment modality.'
    )
    requireResidentKey: Optional[bool] = Field(
        None, description='Whether resident key is required.'
    )
    userVerification: Optional[str] = Field(
        None, description="The Relying Party's user verification requirements."
    )


class GoogleCloudIdentitytoolkitV2AutoRetrievalInfo(BaseModel):
    appSignatureHash: Optional[str] = Field(
        None,
        description="The Android app's signature hash for Google Play Service's SMS Retriever API.",
    )


class GoogleCloudIdentitytoolkitV2FinalizeMfaPhoneRequestInfo(BaseModel):
    androidVerificationProof: Optional[str] = Field(
        None,
        description='Android only. Uses for "instant" phone number verification though GmsCore.',
    )
    code: Optional[str] = Field(None, description='User-entered verification code.')
    phoneNumber: Optional[str] = Field(
        None, description='Required if Android verification proof is presented.'
    )
    sessionInfo: Optional[str] = Field(
        None, description='An opaque string that represents the enrollment session.'
    )


class GoogleCloudIdentitytoolkitV2FinalizeMfaPhoneResponseInfo(BaseModel):
    androidVerificationProof: Optional[str] = Field(
        None,
        description='Android only. Long-lived replacement for valid code tied to android device.',
    )
    androidVerificationProofExpireTime: Optional[str] = Field(
        None,
        description='Android only. Expiration time of verification proof in seconds.',
    )
    phoneNumber: Optional[str] = Field(
        None, description='For Android verification proof.'
    )


class GoogleCloudIdentitytoolkitV2FinalizeMfaSignInResponse(BaseModel):
    idToken: Optional[str] = Field(
        None, description='ID token for the authenticated user.'
    )
    phoneAuthInfo: Optional[
        GoogleCloudIdentitytoolkitV2FinalizeMfaPhoneResponseInfo
    ] = Field(
        None, description='Extra phone auth info, including android verification proof.'
    )
    refreshToken: Optional[str] = Field(
        None, description='Refresh token for the authenticated user.'
    )


class GoogleCloudIdentitytoolkitV2FinalizeMfaTotpEnrollmentRequestInfo(BaseModel):
    sessionInfo: Optional[str] = Field(
        None, description='An opaque string that represents the enrollment session.'
    )
    verificationCode: Optional[str] = Field(
        None, description='User-entered verification code.'
    )


class GoogleCloudIdentitytoolkitV2FinalizeMfaTotpEnrollmentResponseInfo(BaseModel):
    pass


class GoogleCloudIdentitytoolkitV2FinalizePasskeyEnrollmentRequest(BaseModel):
    authenticatorRegistrationResponse: Optional[
        GoogleCloudIdentitytoolkitV2AuthenticatorRegistrationResponse
    ] = Field(
        None, description='Optional. The registration object from the authenticator.'
    )
    idToken: Optional[str] = Field(
        None, description='Required. The GCIP ID token of the signed-in user'
    )
    tenantId: Optional[str] = Field(
        None,
        description='Optional. The ID of the Identity Platform tenant the user is signing in to. If not set, the user will sign in to the default Identity Platform project.',
    )


class GoogleCloudIdentitytoolkitV2FinalizePasskeyEnrollmentResponse(BaseModel):
    idToken: Optional[str] = Field(
        None, description='ID token for the authenticated user.'
    )
    refreshToken: Optional[str] = Field(
        None, description='Refresh token for the authenticated user.'
    )


class GoogleCloudIdentitytoolkitV2FinalizePasskeySignInRequest(BaseModel):
    authenticatorAuthenticationResponse: Optional[
        GoogleCloudIdentitytoolkitV2AuthenticatorAuthenticationResponse
    ] = Field(
        None,
        description='Required. The authentication response object from the authenticator.',
    )
    sessionId: Optional[str] = Field(
        None,
        description='Optional. The session ID that was passed into StartPasskeySignIn, if any.',
    )
    tenantId: Optional[str] = Field(
        None,
        description='Optional. The ID of the Identity Platform tenant the user is signing in to. If not set, the user will sign in to the default Identity Platform project.',
    )


class GoogleCloudIdentitytoolkitV2FinalizePasskeySignInResponse(BaseModel):
    idToken: Optional[str] = Field(
        None, description='ID token for the authenticated user.'
    )
    refreshToken: Optional[str] = Field(
        None, description='Refresh token for the authenticated user.'
    )


class GoogleCloudIdentitytoolkitV2MfaTotpSignInRequestInfo(BaseModel):
    verificationCode: Optional[str] = Field(
        None, description='User-entered verification code.'
    )


class GoogleCloudIdentitytoolkitV2PublicKeyCredentialDescriptor(BaseModel):
    credentialId: Optional[str] = Field(
        None, description='The identifier for the credential.'
    )
    credentialType: Optional[str] = Field(None, description='The type of public key.')
    transports: Optional[List[str]] = Field(
        None,
        description='Authenticator transports that are supported by the authenticator.',
    )


class GoogleCloudIdentitytoolkitV2PublicKeyCredentialParameters(BaseModel):
    alg: Optional[str] = Field(
        None,
        description='The COSE registry number of the cryptographic signature algorithm.',
    )
    credentialType: Optional[str] = Field(
        None, description='The type of public key to be created.'
    )


class GoogleCloudIdentitytoolkitV2PublicKeyCredentialRequestOptions(BaseModel):
    challenge: Optional[str] = Field(None, description='The FIDO challenge.')
    rpId: Optional[str] = Field(None, description='The relying party identifier.')
    userVerification: Optional[str] = Field(
        None, description='The requirements regarding user verification.'
    )


class EnforcementState(Enum):
    ENFORCEMENT_STATE_UNSPECIFIED = 'ENFORCEMENT_STATE_UNSPECIFIED'
    OFF = 'OFF'
    AUDIT = 'AUDIT'
    ENFORCE = 'ENFORCE'


class Provider(Enum):
    RECAPTCHA_PROVIDER_UNSPECIFIED = 'RECAPTCHA_PROVIDER_UNSPECIFIED'
    EMAIL_PASSWORD_PROVIDER = 'EMAIL_PASSWORD_PROVIDER'


class GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState(BaseModel):
    enforcementState: Optional[EnforcementState] = Field(
        None, description='The reCAPTCHA enforcement state for the provider.'
    )
    provider: Optional[Provider] = Field(
        None, description='The provider that has reCAPTCHA protection.'
    )


class TokenType(Enum):
    TOKEN_TYPE_UNSPECIFIED = 'TOKEN_TYPE_UNSPECIFIED'
    REFRESH_TOKEN = 'REFRESH_TOKEN'
    ACCESS_TOKEN = 'ACCESS_TOKEN'
    CODE = 'CODE'


class GoogleCloudIdentitytoolkitV2RevokeTokenRequest(BaseModel):
    idToken: Optional[str] = Field(
        None,
        description='Required. A valid Identity Platform ID token to link the account. If there was a successful token revocation request on the account and no tokens are generated after the revocation, the duplicate requests will be ignored and returned immediately.',
    )
    providerId: Optional[str] = Field(
        None,
        description='Required. The idp provider for the token. Currently only supports Apple Idp. The format should be "apple.com".',
    )
    redirectUri: Optional[str] = Field(
        None,
        description='The redirect URI provided in the initial authorization request made by the client to the IDP. The URI must use the HTTPS protocol, include a domain name, and can’t contain an IP address or localhost. Required if token_type is CODE.',
    )
    tenantId: Optional[str] = Field(
        None,
        description='The ID of the Identity Platform tenant the user is signing in to. If not set, the user will sign in to the default Identity Platform project.',
    )
    token: Optional[str] = Field(
        None,
        description='Required. The token to be revoked. If an authorization_code is passed in, the API will first exchange the code for access token and then revoke the token exchanged.',
    )
    tokenType: Optional[TokenType] = Field(
        None, description='Required. The type of the token to be revoked.'
    )


class GoogleCloudIdentitytoolkitV2RevokeTokenResponse(BaseModel):
    pass


class GoogleCloudIdentitytoolkitV2RpEntity(BaseModel):
    id: Optional[str] = Field(None, description='The RP ID of the FIDO Relying Party.')


class GoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo(BaseModel):
    autoRetrievalInfo: Optional[GoogleCloudIdentitytoolkitV2AutoRetrievalInfo] = Field(
        None,
        description='Android only. Used by Google Play Services to identify the app for auto-retrieval.',
    )
    iosReceipt: Optional[str] = Field(
        None,
        description='iOS only. Receipt of successful app token validation with APNS.',
    )
    iosSecret: Optional[str] = Field(
        None, description='iOS only. Secret delivered to iOS app via APNS.'
    )
    phoneNumber: Optional[str] = Field(
        None, description='Required for enrollment. Phone number to be enrolled as MFA.'
    )
    playIntegrityToken: Optional[str] = Field(
        None,
        description='Android only. Used to assert application identity in place of a recaptcha token (or safety net token). A Play Integrity Token can be generated via the [PlayIntegrity API] (https://developer.android.com/google/play/integrity) with applying SHA256 to the `phone_number` field as the nonce.',
    )
    recaptchaToken: Optional[str] = Field(
        None, description='Web only. Recaptcha solution.'
    )
    safetyNetToken: Optional[str] = Field(
        None,
        description='Android only. Used to assert application identity in place of a recaptcha token. A SafetyNet Token can be generated via the [SafetyNet Android Attestation API](https://developer.android.com/training/safetynet/attestation.html), with the Base64 encoding of the `phone_number` field as the nonce.',
    )


class GoogleCloudIdentitytoolkitV2StartMfaPhoneResponseInfo(BaseModel):
    sessionInfo: Optional[str] = Field(
        None, description='An opaque string that represents the enrollment session.'
    )


class GoogleCloudIdentitytoolkitV2StartMfaSignInRequest(BaseModel):
    mfaEnrollmentId: Optional[str] = Field(
        None,
        description="Required. MFA enrollment id from the user's list of current MFA enrollments.",
    )
    mfaPendingCredential: Optional[str] = Field(
        None, description='Required. Pending credential from first factor sign-in.'
    )
    phoneSignInInfo: Optional[GoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo] = (
        Field(
            None,
            description='Verification info to authorize sending an SMS for phone verification.',
        )
    )
    tenantId: Optional[str] = Field(
        None,
        description='The ID of the Identity Platform tenant the user is signing in to. If not set, the user will sign in to the default Identity Platform project.',
    )


class GoogleCloudIdentitytoolkitV2StartMfaSignInResponse(BaseModel):
    phoneResponseInfo: Optional[
        GoogleCloudIdentitytoolkitV2StartMfaPhoneResponseInfo
    ] = Field(
        None,
        description='MultiFactor sign-in session information specific to SMS-type second factors. Along with the one-time code retrieved from the sent SMS, the contents of this session information should be passed to FinalizeMfaSignIn to complete the sign in.',
    )


class GoogleCloudIdentitytoolkitV2StartMfaTotpEnrollmentRequestInfo(BaseModel):
    pass


class GoogleCloudIdentitytoolkitV2StartMfaTotpEnrollmentResponseInfo(BaseModel):
    finalizeEnrollmentTime: Optional[str] = Field(
        None, description='The time by which the enrollment must finish.'
    )
    hashingAlgorithm: Optional[str] = Field(
        None,
        description='The hashing algorithm used to generate the verification code.',
    )
    periodSec: Optional[int] = Field(
        None,
        description='Duration in seconds at which the verification code will change.',
    )
    sessionInfo: Optional[str] = Field(
        None, description='An encoded string that represents the enrollment session.'
    )
    sharedSecretKey: Optional[str] = Field(
        None,
        description='A base 32 encoded string that represents the shared TOTP secret. The base 32 encoding is the one specified by [RFC4648#section-6](https://datatracker.ietf.org/doc/html/rfc4648#section-6). (This is the same as the base 32 encoding from [RFC3548#section-5](https://datatracker.ietf.org/doc/html/rfc3548#section-5).)',
    )
    verificationCodeLength: Optional[int] = Field(
        None,
        description='The length of the verification code that needs to be generated.',
    )


class GoogleCloudIdentitytoolkitV2StartPasskeyEnrollmentRequest(BaseModel):
    idToken: Optional[str] = Field(
        None, description='Required. The GCIP ID token of the signed-in user'
    )
    tenantId: Optional[str] = Field(
        None,
        description='Optional. The ID of the Identity Platform tenant the user is signing in to. If not set, the user will sign in to the default Identity Platform project.',
    )


class GoogleCloudIdentitytoolkitV2StartPasskeySignInRequest(BaseModel):
    sessionId: Optional[str] = Field(
        None,
        description='Optional. The developer can bind their own concept of a user session to this flow.',
    )
    tenantId: Optional[str] = Field(
        None,
        description='Optional. The ID of the Identity Platform tenant the user is signing in to. If not set, the user will sign in to the default Identity Platform project.',
    )


class GoogleCloudIdentitytoolkitV2StartPasskeySignInResponse(BaseModel):
    credentialRequestOptions: Optional[
        GoogleCloudIdentitytoolkitV2PublicKeyCredentialRequestOptions
    ] = Field(
        None,
        description='Parameters specified for the authenticator to sign a challenge.',
    )


class GoogleCloudIdentitytoolkitV2UserEntity(BaseModel):
    id: Optional[str] = Field(None, description='The user ID.')


class GoogleCloudIdentitytoolkitV2WithdrawMfaRequest(BaseModel):
    idToken: Optional[str] = Field(None, description="Required. User's ID token.")
    mfaEnrollmentId: Optional[str] = Field(
        None, description='Required. MFA enrollment id from a current MFA enrollment.'
    )
    tenantId: Optional[str] = Field(
        None,
        description='The ID of the Identity Platform tenant that the user unenrolling MFA belongs to. If not set, the user belongs to the default Identity Platform project.',
    )


class GoogleCloudIdentitytoolkitV2WithdrawMfaResponse(BaseModel):
    idToken: Optional[str] = Field(
        None, description='ID token updated to reflect removal of the second factor.'
    )
    refreshToken: Optional[str] = Field(
        None,
        description='Refresh token updated to reflect removal of the second factor.',
    )


class LogType(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


class GoogleIamV1AuditLogConfig(BaseModel):
    exemptedMembers: Optional[List[str]] = Field(
        None,
        description='Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.',
    )
    logType: Optional[LogType] = Field(
        None, description='The log type that this config enables.'
    )


class GoogleIamV1GetPolicyOptions(BaseModel):
    requestedPolicyVersion: Optional[int] = Field(
        None,
        description='Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class GoogleIamV1TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class GoogleIamV1TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class GoogleProtobufEmpty(BaseModel):
    pass


class GoogleTypeExpr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class ClientType(Enum):
    CLIENT_TYPE_UNSPECIFIED = 'CLIENT_TYPE_UNSPECIFIED'
    CLIENT_TYPE_WEB = 'CLIENT_TYPE_WEB'
    CLIENT_TYPE_ANDROID = 'CLIENT_TYPE_ANDROID'
    CLIENT_TYPE_IOS = 'CLIENT_TYPE_IOS'


class Version(Enum):
    RECAPTCHA_VERSION_UNSPECIFIED = 'RECAPTCHA_VERSION_UNSPECIFIED'
    RECAPTCHA_ENTERPRISE = 'RECAPTCHA_ENTERPRISE'


class GoogleCloudIdentitytoolkitAdminV2AppleSignInConfig(BaseModel):
    bundleIds: Optional[List[str]] = Field(
        None, description="A list of Bundle ID's usable by this project"
    )
    codeFlowConfig: Optional[GoogleCloudIdentitytoolkitAdminV2CodeFlowConfig] = None


class GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig(BaseModel):
    forwardInboundCredentials: Optional[
        GoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials
    ] = Field(
        None,
        description='The user credentials to include in the JWT payload that is sent to the registered Blocking Functions.',
    )
    triggers: Optional[Dict[str, GoogleCloudIdentitytoolkitAdminV2Trigger]] = Field(
        None,
        description='Map of Trigger to event type. Key should be one of the supported event types: "beforeCreate", "beforeSignIn"',
    )


class GoogleCloudIdentitytoolkitAdminV2ClientConfig(BaseModel):
    apiKey: Optional[str] = Field(
        None,
        description='Output only. API key that can be used when making requests for this project.',
    )
    firebaseSubdomain: Optional[str] = Field(
        None, description='Output only. Firebase subdomain.'
    )
    permissions: Optional[GoogleCloudIdentitytoolkitAdminV2Permissions] = Field(
        None,
        description="Configuration related to restricting a user's ability to affect their account.",
    )


class GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig(BaseModel):
    permissions: Optional[GoogleCloudIdentitytoolkitAdminV2ClientPermissions] = Field(
        None,
        description="Configuration related to restricting a user's ability to affect their account.",
    )


class GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig(BaseModel):
    appleSignInConfig: Optional[GoogleCloudIdentitytoolkitAdminV2AppleSignInConfig] = (
        Field(None, description='Additional config for Apple-based projects.')
    )
    clientId: Optional[str] = Field(None, description='OAuth client ID.')
    clientSecret: Optional[str] = Field(None, description='OAuth client secret.')
    enabled: Optional[bool] = Field(
        None, description='True if allows the user to sign in with the provider.'
    )
    name: Optional[str] = Field(
        None,
        description='The name of the DefaultSupportedIdpConfig resource, for example: "projects/my-awesome-project/defaultSupportedIdpConfigs/google.com"',
    )


class GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig(BaseModel):
    displayName: Optional[str] = Field(
        None, description="The config's display name set by developers."
    )
    enabled: Optional[bool] = Field(
        None, description='True if allows the user to sign in with the provider.'
    )
    idpConfig: Optional[GoogleCloudIdentitytoolkitAdminV2IdpConfig] = Field(
        None,
        description='The SAML IdP (Identity Provider) configuration when the project acts as the relying party.',
    )
    name: Optional[str] = Field(
        None,
        description="The name of the InboundSamlConfig resource, for example: 'projects/my-awesome-project/inboundSamlConfigs/my-config-id'. Ignored during create requests.",
    )
    spConfig: Optional[GoogleCloudIdentitytoolkitAdminV2SpConfig] = Field(
        None,
        description='The SAML SP (Service Provider) configuration when the project acts as the relying party to receive and accept an authentication assertion issued by a SAML identity provider.',
    )


class GoogleCloudIdentitytoolkitAdminV2ListDefaultSupportedIdpConfigsResponse(
    BaseModel
):
    defaultSupportedIdpConfigs: Optional[
        List[GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig]
    ] = Field(None, description='The set of configs.')
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class GoogleCloudIdentitytoolkitAdminV2ListInboundSamlConfigsResponse(BaseModel):
    inboundSamlConfigs: Optional[
        List[GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig]
    ] = Field(None, description='The set of configs.')
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class GoogleCloudIdentitytoolkitAdminV2MonitoringConfig(BaseModel):
    requestLogging: Optional[GoogleCloudIdentitytoolkitAdminV2RequestLogging] = Field(
        None,
        description='Configuration for logging requests made to this project to Stackdriver Logging',
    )


class GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig(BaseModel):
    clientId: Optional[str] = Field(
        None, description='The client id of an OAuth client.'
    )
    clientSecret: Optional[str] = Field(
        None,
        description='The client secret of the OAuth client, to enable OIDC code flow.',
    )
    displayName: Optional[str] = Field(
        None, description="The config's display name set by developers."
    )
    enabled: Optional[bool] = Field(
        None, description='True if allows the user to sign in with the provider.'
    )
    issuer: Optional[str] = Field(
        None, description='For OIDC Idps, the issuer identifier.'
    )
    name: Optional[str] = Field(
        None,
        description="The name of the OAuthIdpConfig resource, for example: 'projects/my-awesome-project/oauthIdpConfigs/oauth-config-id'. Ignored during create requests.",
    )
    responseType: Optional[GoogleCloudIdentitytoolkitAdminV2OAuthResponseType] = Field(
        None,
        description='The response type to request for in the OAuth authorization flow. You can set either `id_token` or `code` to true, but not both. Setting both types to be simultaneously true (`{code: true, id_token: true}`) is not yet supported.',
    )


class GoogleCloudIdentitytoolkitAdminV2ProviderConfig(BaseModel):
    state: Optional[State1] = Field(
        None, description='Describes the state of the MultiFactor Authentication type.'
    )
    totpProviderConfig: Optional[
        GoogleCloudIdentitytoolkitAdminV2TotpMfaProviderConfig
    ] = Field(None, description='TOTP MFA provider config for this project.')


class GoogleCloudIdentitytoolkitAdminV2QuotaConfig(BaseModel):
    signUpQuotaConfig: Optional[GoogleCloudIdentitytoolkitAdminV2TemporaryQuota] = (
        Field(
            None,
            description='Quota for the Signup endpoint, if overwritten. Signup quota is measured in sign ups per project per hour per IP.',
        )
    )


class GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig(BaseModel):
    emailPasswordEnforcementState: Optional[EmailPasswordEnforcementState] = Field(
        None,
        description='The reCAPTCHA config for email/password provider, containing the enforcement status. The email/password provider contains all related user flows protected by reCAPTCHA.',
    )
    managedRules: Optional[
        List[GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule]
    ] = Field(
        None,
        description='The managed rules for authentication action based on reCAPTCHA scores. The rules are shared across providers for a given tenant project.',
    )
    recaptchaKeys: Optional[List[GoogleCloudIdentitytoolkitAdminV2RecaptchaKey]] = (
        Field(None, description='Output only. The reCAPTCHA keys.')
    )
    useAccountDefender: Optional[bool] = Field(
        None,
        description='Whether to use the account defender for reCAPTCHA assessment. Defaults to `false`.',
    )


class GoogleCloudIdentitytoolkitAdminV2SendEmail(BaseModel):
    callbackUri: Optional[str] = Field(
        None, description='action url in email template.'
    )
    changeEmailTemplate: Optional[GoogleCloudIdentitytoolkitAdminV2EmailTemplate] = (
        Field(None, description='Email template for change email')
    )
    dnsInfo: Optional[GoogleCloudIdentitytoolkitAdminV2DnsInfo] = Field(
        None, description='Information of custom domain DNS verification.'
    )
    legacyResetPasswordTemplate: Optional[
        GoogleCloudIdentitytoolkitAdminV2EmailTemplate
    ] = Field(
        None, description='Reset password email template for legacy Firebase V1 app.'
    )
    method: Optional[Method] = Field(
        None, description='The method used for sending an email.'
    )
    resetPasswordTemplate: Optional[GoogleCloudIdentitytoolkitAdminV2EmailTemplate] = (
        Field(None, description='Email template for reset password')
    )
    revertSecondFactorAdditionTemplate: Optional[
        GoogleCloudIdentitytoolkitAdminV2EmailTemplate
    ] = Field(
        None, description='Email template for reverting second factor addition emails'
    )
    smtp: Optional[GoogleCloudIdentitytoolkitAdminV2Smtp] = Field(
        None, description='Use a custom SMTP relay'
    )
    verifyEmailTemplate: Optional[GoogleCloudIdentitytoolkitAdminV2EmailTemplate] = (
        Field(None, description='Email template for verify email')
    )


class GoogleCloudIdentitytoolkitAdminV2SendSms(BaseModel):
    smsTemplate: Optional[GoogleCloudIdentitytoolkitAdminV2SmsTemplate] = Field(
        None, description='Output only. The template to use when sending an SMS.'
    )
    useDeviceLocale: Optional[bool] = Field(
        None, description='Whether to use the accept_language header for SMS.'
    )


class GoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentRequest(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='Display name which is entered by users to distinguish between different second factors with same type or different type.',
    )
    idToken: Optional[str] = Field(None, description='Required. ID token.')
    phoneVerificationInfo: Optional[
        GoogleCloudIdentitytoolkitV2FinalizeMfaPhoneRequestInfo
    ] = Field(
        None,
        description='Verification info to authorize sending an SMS for phone verification.',
    )
    tenantId: Optional[str] = Field(
        None,
        description='The ID of the Identity Platform tenant that the user enrolling MFA belongs to. If not set, the user belongs to the default Identity Platform project.',
    )
    totpVerificationInfo: Optional[
        GoogleCloudIdentitytoolkitV2FinalizeMfaTotpEnrollmentRequestInfo
    ] = Field(None, description='Verification information for TOTP.')


class GoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentResponse(BaseModel):
    idToken: Optional[str] = Field(
        None, description='ID token updated to reflect MFA enrollment.'
    )
    phoneAuthInfo: Optional[
        GoogleCloudIdentitytoolkitV2FinalizeMfaPhoneResponseInfo
    ] = Field(None, description='Auxiliary auth info specific to phone auth.')
    refreshToken: Optional[str] = Field(
        None, description='Refresh token updated to reflect MFA enrollment.'
    )
    totpAuthInfo: Optional[
        GoogleCloudIdentitytoolkitV2FinalizeMfaTotpEnrollmentResponseInfo
    ] = Field(None, description='Auxiliary auth info specific to TOTP auth.')


class GoogleCloudIdentitytoolkitV2FinalizeMfaSignInRequest(BaseModel):
    mfaEnrollmentId: Optional[str] = Field(
        None,
        description="The MFA enrollment ID from the user's list of current MFA enrollments.",
    )
    mfaPendingCredential: Optional[str] = Field(
        None, description='Required. Pending credential from first factor sign-in.'
    )
    phoneVerificationInfo: Optional[
        GoogleCloudIdentitytoolkitV2FinalizeMfaPhoneRequestInfo
    ] = Field(None, description='Proof of completion of the SMS based MFA challenge.')
    tenantId: Optional[str] = Field(
        None,
        description='The ID of the Identity Platform tenant the user is signing in to. If not set, the user will sign in to the default Identity Platform project.',
    )
    totpVerificationInfo: Optional[
        GoogleCloudIdentitytoolkitV2MfaTotpSignInRequestInfo
    ] = Field(None, description='Proof of completion of the TOTP based MFA challenge.')


class GoogleCloudIdentitytoolkitV2PublicKeyCredentialCreationOptions(BaseModel):
    authenticatorSelection: Optional[
        GoogleCloudIdentitytoolkitV2AuthenticatorSelectionCriteria
    ] = Field(
        None, description='Criteria for the authenticator to create a credential.'
    )
    challenge: Optional[str] = Field(None, description='The FIDO challenge.')
    excludeCredentials: Optional[
        List[GoogleCloudIdentitytoolkitV2PublicKeyCredentialDescriptor]
    ] = Field(None, description='Credentials already mapped to this user.')
    pubKeyCredParams: Optional[
        List[GoogleCloudIdentitytoolkitV2PublicKeyCredentialParameters]
    ] = Field(
        None, description='Lists the supported key types and signature algorithms.'
    )
    rp: Optional[GoogleCloudIdentitytoolkitV2RpEntity] = Field(
        None, description='The relying party attributes for creating a new credential.'
    )
    user: Optional[GoogleCloudIdentitytoolkitV2UserEntity] = Field(
        None, description='The user attributes for creating a new credential.'
    )


class GoogleCloudIdentitytoolkitV2RecaptchaConfig(BaseModel):
    recaptchaEnforcementState: Optional[
        List[GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState]
    ] = Field(
        None,
        description='The reCAPTCHA enforcement state for the providers that GCIP supports reCAPTCHA protection.',
    )
    recaptchaKey: Optional[str] = Field(
        None,
        description='The reCAPTCHA Enterprise key resource name, e.g. "projects/{project}/keys/{key}".',
    )


class GoogleCloudIdentitytoolkitV2StartMfaEnrollmentRequest(BaseModel):
    idToken: Optional[str] = Field(None, description="Required. User's ID token.")
    phoneEnrollmentInfo: Optional[
        GoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo
    ] = Field(
        None,
        description='Verification info to authorize sending an SMS for phone verification.',
    )
    tenantId: Optional[str] = Field(
        None,
        description='The ID of the Identity Platform tenant that the user enrolling MFA belongs to. If not set, the user belongs to the default Identity Platform project.',
    )
    totpEnrollmentInfo: Optional[
        GoogleCloudIdentitytoolkitV2StartMfaTotpEnrollmentRequestInfo
    ] = Field(None, description='Sign-in info specific to TOTP auth.')


class GoogleCloudIdentitytoolkitV2StartMfaEnrollmentResponse(BaseModel):
    phoneSessionInfo: Optional[
        GoogleCloudIdentitytoolkitV2StartMfaPhoneResponseInfo
    ] = Field(
        None,
        description='Verification info to authorize sending an SMS for phone verification.',
    )
    totpSessionInfo: Optional[
        GoogleCloudIdentitytoolkitV2StartMfaTotpEnrollmentResponseInfo
    ] = Field(None, description='Enrollment response info specific to TOTP auth.')


class GoogleCloudIdentitytoolkitV2StartPasskeyEnrollmentResponse(BaseModel):
    credentialCreationOptions: Optional[
        GoogleCloudIdentitytoolkitV2PublicKeyCredentialCreationOptions
    ] = Field(
        None,
        description='Parameters specified for the authenticator to create a public key.',
    )


class GoogleIamV1AuditConfig(BaseModel):
    auditLogConfigs: Optional[List[GoogleIamV1AuditLogConfig]] = Field(
        None, description='The configuration for logging of each type of permission.'
    )
    service: Optional[str] = Field(
        None,
        description='Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.',
    )


class GoogleIamV1Binding(BaseModel):
    condition: Optional[GoogleTypeExpr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class GoogleIamV1GetIamPolicyRequest(BaseModel):
    options: Optional[GoogleIamV1GetPolicyOptions] = Field(
        None,
        description='OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.',
    )


class GoogleIamV1Policy(BaseModel):
    auditConfigs: Optional[List[GoogleIamV1AuditConfig]] = Field(
        None, description='Specifies cloud audit logging configuration for this policy.'
    )
    bindings: Optional[List[GoogleIamV1Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class GoogleIamV1SetIamPolicyRequest(BaseModel):
    policy: Optional[GoogleIamV1Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`',
    )


class GoogleCloudIdentitytoolkitAdminV2ListOAuthIdpConfigsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    oauthIdpConfigs: Optional[List[GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig]] = (
        Field(None, description='The set of configs.')
    )


class GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig(BaseModel):
    enabledProviders: Optional[List[EnabledProvider]] = Field(
        None, description='A list of usable second factors for this project.'
    )
    providerConfigs: Optional[List[GoogleCloudIdentitytoolkitAdminV2ProviderConfig]] = (
        Field(
            None,
            description="A list of usable second factors for this project along with their configurations. This field does not support phone based MFA, for that use the 'enabled_providers' field.",
        )
    )
    state: Optional[State] = Field(
        None,
        description='Whether MultiFactor Authentication has been enabled for this project.',
    )


class GoogleCloudIdentitytoolkitAdminV2NotificationConfig(BaseModel):
    defaultLocale: Optional[str] = Field(
        None, description='Default locale used for email and SMS in IETF BCP 47 format.'
    )
    sendEmail: Optional[GoogleCloudIdentitytoolkitAdminV2SendEmail] = Field(
        None, description='Options for email sending.'
    )
    sendSms: Optional[GoogleCloudIdentitytoolkitAdminV2SendSms] = Field(
        None, description='Options for SMS sending.'
    )


class GoogleCloudIdentitytoolkitAdminV2Tenant(BaseModel):
    allowPasswordSignup: Optional[bool] = Field(
        None, description='Whether to allow email/password user authentication.'
    )
    autodeleteAnonymousUsers: Optional[bool] = Field(
        None,
        description='Whether anonymous users will be auto-deleted after a period of 30 days.',
    )
    client: Optional[GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig] = Field(
        None,
        description='Options related to how clients making requests on behalf of a project should be configured.',
    )
    disableAuth: Optional[bool] = Field(
        None,
        description='Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to sign-in. Admins of the disabled tenant are not able to manage its users.',
    )
    displayName: Optional[str] = Field(None, description='Display name of the tenant.')
    emailPrivacyConfig: Optional[
        GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig
    ] = Field(
        None,
        description='Configuration for settings related to email privacy and public visibility.',
    )
    enableAnonymousUser: Optional[bool] = Field(
        None, description='Whether to enable anonymous user authentication.'
    )
    enableEmailLinkSignin: Optional[bool] = Field(
        None, description='Whether to enable email link user authentication.'
    )
    hashConfig: Optional[GoogleCloudIdentitytoolkitAdminV2HashConfig] = Field(
        None,
        description='Output only. Hash config information of a tenant for display on Pantheon. This can only be displayed on Pantheon to avoid the sensitive information to get accidentally leaked. Only returned in GetTenant response to restrict reading of this information. Requires firebaseauth.configs.getHashConfig permission on the agent project for returning this field.',
    )
    inheritance: Optional[GoogleCloudIdentitytoolkitAdminV2Inheritance] = Field(
        None, description='Specify the settings that the tenant could inherit.'
    )
    mfaConfig: Optional[GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig] = Field(
        None, description='The tenant-level configuration of MFA options.'
    )
    monitoring: Optional[GoogleCloudIdentitytoolkitAdminV2MonitoringConfig] = Field(
        None, description='Configuration related to monitoring project activity.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. Resource name of a tenant. For example: "projects/{project-id}/tenants/{tenant-id}"',
    )
    recaptchaConfig: Optional[GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig] = Field(
        None, description='The tenant-level reCAPTCHA config.'
    )
    smsRegionConfig: Optional[GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig] = Field(
        None,
        description='Configures which regions are enabled for SMS verification code sending.',
    )
    testPhoneNumbers: Optional[Dict[str, str]] = Field(
        None,
        description='A map of pairs that can be used for MFA. The phone number should be in E.164 format (https://www.itu.int/rec/T-REC-E.164/) and a maximum of 10 pairs can be added (error will be thrown once exceeded).',
    )


class GoogleCloudIdentitytoolkitAdminV2Config(BaseModel):
    authorizedDomains: Optional[List[str]] = Field(
        None, description='List of domains authorized for OAuth redirects'
    )
    autodeleteAnonymousUsers: Optional[bool] = Field(
        None,
        description='Whether anonymous users will be auto-deleted after a period of 30 days.',
    )
    blockingFunctions: Optional[
        GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig
    ] = Field(None, description='Configuration related to blocking functions.')
    client: Optional[GoogleCloudIdentitytoolkitAdminV2ClientConfig] = Field(
        None,
        description='Options related to how clients making requests on behalf of a project should be configured.',
    )
    emailPrivacyConfig: Optional[
        GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig
    ] = Field(
        None,
        description='Configuration for settings related to email privacy and public visibility.',
    )
    mfa: Optional[GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig] = Field(
        None,
        description="Configuration for this project's multi-factor authentication, including whether it is active and what factors can be used for the second factor",
    )
    monitoring: Optional[GoogleCloudIdentitytoolkitAdminV2MonitoringConfig] = Field(
        None, description='Configuration related to monitoring project activity.'
    )
    multiTenant: Optional[GoogleCloudIdentitytoolkitAdminV2MultiTenantConfig] = Field(
        None, description='Configuration related to multi-tenant functionality.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The name of the Config resource. Example: "projects/my-awesome-project/config"',
    )
    notification: Optional[GoogleCloudIdentitytoolkitAdminV2NotificationConfig] = Field(
        None, description='Configuration related to sending notifications to users.'
    )
    quota: Optional[GoogleCloudIdentitytoolkitAdminV2QuotaConfig] = Field(
        None, description='Configuration related to quotas.'
    )
    recaptchaConfig: Optional[GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig] = Field(
        None, description='The project-level reCAPTCHA config.'
    )
    signIn: Optional[GoogleCloudIdentitytoolkitAdminV2SignInConfig] = Field(
        None, description='Configuration related to local sign in methods.'
    )
    smsRegionConfig: Optional[GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig] = Field(
        None,
        description='Configures which regions are enabled for SMS verification code sending.',
    )
    subtype: Optional[Subtype] = Field(
        None, description='Output only. The subtype of this config.'
    )


class GoogleCloudIdentitytoolkitAdminV2ListTenantsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The token to get the next page of results.'
    )
    tenants: Optional[List[GoogleCloudIdentitytoolkitAdminV2Tenant]] = Field(
        None, description='A list of tenants under the given agent project.'
    )
